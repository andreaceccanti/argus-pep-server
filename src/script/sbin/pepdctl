#! /bin/bash
#
# Copyright (c) Members of the EGEE Collaboration. 2006-2010.
# See http://www.eu-egee.org/partners/ for details on the copyright holders.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#set -x

# config, log and lib directories
PEPD_CONFDIR=${PEPD_CONFDIR-"/etc/argus/pepd"}
PEPD_LOGDIR=${PEPD_LOGDIR-"/var/log/argus/pepd"}
PEPD_LIBDIR=${PEPD_LIBDIR-"/var/lib/argus/pepd"}

# configuration file
PEPD_CONF=${PEPD_CONF-"$PEPD_CONFDIR/pepd.ini"}

# source optional configuration
if [ -r /etc/sysconfig/argus-pepd ]; then
   . /etc/sysconfig/argus-pepd
fi

JAVACMD=${JAVACMD-`which java`}
if [ ! -x "$JAVACMD" ] ; then
    echo "$0: ERROR: 'java' not available in PATH"
    exit 1
fi

# check config file
if [ ! -r "$PEPD_CONF" ]; then
    echo "$0: ERROR: config file $PEPD_CONF not readable"
    exit 1
fi

# add in the dependency .jar files from the lib directory
jarfiles="$PEPD_LIBDIR/lib/*.jar"
for jar in $jarfiles
do
    # if the directory is empty, then it will return the input string
    # this is stupid, so case for it
    if [ -f "$jar" ] ; then
        LOCALCLASSPATH="$LOCALCLASSPATH":"$jar"
    fi
done
# check classpath
if [ -z "$LOCALCLASSPATH" ]; then
    echo "$0: ERROR: LOCALCLASSPATH empty, check $PEPD_LIBDIR/lib directory"
    exit 1
fi
# check endorsed directory
if [ -d "$PEPD_LIBDIR/endorsed" ]; then
    echo "$0: ERROR: $PEPD_LIBDIR/endorsed does not exist"
    exit 1
fi
# set the mandatory endorsed dir and the classpath
JVMOPTS="-Djava.endorsed.dirs=$PEPD_LIBDIR/endorsed -classpath $LOCALCLASSPATH $JVMOPTS"

# set the mandatory PEP server directory properties
JVMOPTS="-Dorg.glite.authz.pep.confdir=$PEPD_CONFDIR -Dorg.glite.authz.pep.logdir=$PEPD_LOGDIR $JVMOPTS"

function executeAdminCommand {
    HOST=`sed 's/ //g' $PEPD_CONF | grep "^adminHost" | awk 'BEGIN {FS="="}{print $2}'`
    if [ -z $HOST ] ; then
       HOST="127.0.0.1"
    fi

    PORT=`sed 's/ //g' $PEPD_CONF | grep "^adminPort" | awk 'BEGIN {FS="="}{print $2}'`
    if [ -z $PORT ] ; then
       PORT="8155"
    fi
    
    PASS=`sed 's/ //g' $PEPD_CONF | grep "^adminPassword" | awk 'BEGIN {FS="="}{print $2}'`
    
    $JAVACMD $JVMOPTS 'org.glite.authz.common.http.JettyAdminServiceCLI' $HOST $PORT $1 $PASS
}

function start {
    # Run the PDP
    $JAVACMD $JVMOPTS 'org.glite.authz.pep.server.PEPDaemon' $PEPD_CONF &
}


function print_help {
   echo "PEP Daemon control script"
   echo "Usage:"
   echo "  $0 start   - to start the service"
   echo "  $0 stop    - to stop the service" 
   echo "  $0 status  - print PEP daemon status"
   echo "  $0 clearResponseCache - clears the PEP daemon PDP response cache"
}

case "$1" in
    start)
        start
        ;;
    stop)
        executeAdminCommand 'shutdown' 
        ;;
    status) 
        executeAdminCommand 'status'
        ;;
    clearResponseCache) 
        executeAdminCommand 'clearResponseCache'
        ;;
    *) 
        print_help 
        exit 1
        ;;
esac
exit $? 

